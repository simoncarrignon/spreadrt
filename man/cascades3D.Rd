% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/cascades3D.R
\name{cascades3D}
\alias{cascades3D}
\title{Spread of cascades of retweet}
\usage{
cascades3D(N = 200, R = 10, betadistrib = rep(1, 200), utility = seq(0,
  1, length.out = 10), time = 2, captl = -1, IC = 50, summary = T,
  Nmax = NULL, lambda_c = 0, lambda_r = 0, dtime = 0, stime = -1,
  memory = T, log = T)
}
\arguments{
\item{N}{total number of agents}

\item{R}{initial number of rumors}

\item{betadistrib}{vector of size N with the value of beta for each agents}

\item{utility}{vector of size R, with the value of intrinsic utility for each rumors}

\item{time}{number of time that the agents will check their timeline  (length of the simulation)}

\item{captl}{maximum messages that agents can acess to}

\item{IC}{initial number of cascades}

\item{summary}{if TRUE, return a data.frame with summary statistics about the cascade, else return a list of lists with a list of all cascades, a list of all rumors, a list of the results, and much more}

\item{Nmax}{if NULL or Nmax == 1, N agents will have the opportunity to retweet at each time step, ifNmax > 1, Nmax randomly sampled agent will have the possibility to retweet, if Nmax < 1, Nmax represnet the proportion of agents that will be able to retweet}

\item{lambda_c}{rate of apparition of new cascades}

\item{lambda_r}{rate of apparition of new rumors}

\item{dtime}{maximum number of timestep during which a cascades can survives. if =< 0 cascades are kept during all the simulation.}

\item{stime}{the oldest tweet (in timestep) that an agent can access from an active cascade (if stime = 1 the agents can only access retweet or tweet done during the previous time step. If -1 there is no limit.}

\item{log}{print the time step and some information if TRUE, nothing if FALSE}
}
\value{
depends on the value of the BOOLEAN summary
}
\description{
\code{cascades3D} Generate cascades of retweets from a initial population of rumors given
}
\details{
main model of the package
}
\examples{
simplerun=cascades3D()
par(mfrow=c(1,2))
plotCCFD(simplerun$size,main="Cascade Size")
plotCCFD(simplerun$depth,main="Cascade Depth")
}
